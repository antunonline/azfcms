

IndexController = {
    $_classMethods:null,
    $_delimiters:null,
    $_invokeArgs:null,
    $_frontController:null,
    $_request:null,
    $_response:null,
    viewSuffix:null,
    view:null,
    $_helper:null,
    init:function(){},
    indexAction:function(){},
    index1Action:function(){},
    $__construct:function(request,response,invokeArgs){},
    initView:function(){},
    render:function(action,name,noController){},
    renderScript:function(script,name){},
    getViewScript:function(action,noController){},
    getRequest:function(){},
    setRequest:function(request){},
    getResponse:function(){},
    setResponse:function(response){},
    $_setInvokeArgs:function(args){},
    getInvokeArgs:function(){},
    getInvokeArg:function(key){},
    getHelper:function(helperName){},
    getHelperCopy:function(helperName){},
    setFrontController:function(front){},
    getFrontController:function(){},
    preDispatch:function(){},
    postDispatch:function(){},
    $__call:function(methodName,args){},
    dispatch:function(action){},
    run:function(request,response){},
    $_getParam:function(paramName,$default){},
    $_setParam:function(paramName,value){},
    $_hasParam:function(paramName){},
    $_getAllParams:function(){},
    $_forward:function(action,controller,module,params){},
    $_redirect:function(url,options){}
}

DijiteditorController = {
    $_classMethods:null,
    $_delimiters:null,
    $_invokeArgs:null,
    $_frontController:null,
    $_request:null,
    $_response:null,
    viewSuffix:null,
    view:null,
    $_helper:null,
    getNavigation:function(){},
    renderAction:function(){},
    installpageAction:function(){},
    uninstallpageAction:function(){},
    preDispatch:function(){},
    getContextHelper:function(){},
    getNavigationId:function(){},
    getAction:function(){},
    getValue:function(key){},
    getValues:function(){},
    setAction:function(){},
    setValue:function(key,value){},
    setValues:function(values){},
    $__construct:function(request,response,invokeArgs){},
    init:function(){},
    initView:function(){},
    render:function(action,name,noController){},
    renderScript:function(script,name){},
    getViewScript:function(action,noController){},
    getRequest:function(){},
    setRequest:function(request){},
    getResponse:function(){},
    setResponse:function(response){},
    $_setInvokeArgs:function(args){},
    getInvokeArgs:function(){},
    getInvokeArg:function(key){},
    getHelper:function(helperName){},
    getHelperCopy:function(helperName){},
    setFrontController:function(front){},
    getFrontController:function(){},
    postDispatch:function(){},
    $__call:function(methodName,args){},
    dispatch:function(action){},
    run:function(request,response){},
    $_getParam:function(paramName,$default){},
    $_setParam:function(paramName,value){},
    $_hasParam:function(paramName){},
    $_getAllParams:function(){},
    $_forward:function(action,controller,module,params){},
    $_redirect:function(url,options){}
}

Azf_Controller_Action = {
    $_classMethods:null,
    $_delimiters:null,
    $_invokeArgs:null,
    $_frontController:null,
    $_request:null,
    $_response:null,
    viewSuffix:null,
    view:null,
    $_helper:null,
    preDispatch:function(){},
    getNavigation:function(){},
    getContextHelper:function(){},
    getNavigationId:function(){},
    renderAction:function(){},
    installpageAction:function(){},
    uninstallpageAction:function(){},
    getAction:function(){},
    getValue:function(key){},
    getValues:function(){},
    setAction:function(){},
    setValue:function(key,value){},
    setValues:function(values){},
    $__construct:function(request,response,invokeArgs){},
    init:function(){},
    initView:function(){},
    render:function(action,name,noController){},
    renderScript:function(script,name){},
    getViewScript:function(action,noController){},
    getRequest:function(){},
    setRequest:function(request){},
    getResponse:function(){},
    setResponse:function(response){},
    $_setInvokeArgs:function(args){},
    getInvokeArgs:function(){},
    getInvokeArg:function(key){},
    getHelper:function(helperName){},
    getHelperCopy:function(helperName){},
    setFrontController:function(front){},
    getFrontController:function(){},
    postDispatch:function(){},
    $__call:function(methodName,args){},
    dispatch:function(action){},
    run:function(request,response){},
    $_getParam:function(paramName,$default){},
    $_setParam:function(paramName,value){},
    $_hasParam:function(paramName){},
    $_getAllParams:function(){},
    $_forward:function(action,controller,module,params){},
    $_redirect:function(url,options){}
}

RedirectorController = {
    $_classMethods:null,
    $_delimiters:null,
    $_invokeArgs:null,
    $_frontController:null,
    $_request:null,
    $_response:null,
    viewSuffix:null,
    view:null,
    $_helper:null,
    installpageAction:function(){},
    $_setUrl:function(url){},
    renderAction:function(){},
    uninstallpageAction:function(){},
    preDispatch:function(){},
    getNavigation:function(){},
    getContextHelper:function(){},
    getNavigationId:function(){},
    getAction:function(){},
    getValue:function(key){},
    getValues:function(){},
    setAction:function(){},
    setValue:function(key,value){},
    setValues:function(values){},
    $__construct:function(request,response,invokeArgs){},
    init:function(){},
    initView:function(){},
    render:function(action,name,noController){},
    renderScript:function(script,name){},
    getViewScript:function(action,noController){},
    getRequest:function(){},
    setRequest:function(request){},
    getResponse:function(){},
    setResponse:function(response){},
    $_setInvokeArgs:function(args){},
    getInvokeArgs:function(){},
    getInvokeArg:function(key){},
    getHelper:function(helperName){},
    getHelperCopy:function(helperName){},
    setFrontController:function(front){},
    getFrontController:function(){},
    postDispatch:function(){},
    $__call:function(methodName,args){},
    dispatch:function(action){},
    run:function(request,response){},
    $_getParam:function(paramName,$default){},
    $_setParam:function(paramName,value){},
    $_hasParam:function(paramName){},
    $_getAllParams:function(){},
    $_forward:function(action,controller,module,params){},
    $_redirect:function(url,options){}
}

ErrorController = {
    $_classMethods:null,
    $_delimiters:null,
    $_invokeArgs:null,
    $_frontController:null,
    $_request:null,
    $_response:null,
    viewSuffix:null,
    view:null,
    $_helper:null,
    errorAction:function(){},
    getLog:function(){},
    $__construct:function(request,response,invokeArgs){},
    init:function(){},
    initView:function(){},
    render:function(action,name,noController){},
    renderScript:function(script,name){},
    getViewScript:function(action,noController){},
    getRequest:function(){},
    setRequest:function(request){},
    getResponse:function(){},
    setResponse:function(response){},
    $_setInvokeArgs:function(args){},
    getInvokeArgs:function(){},
    getInvokeArg:function(key){},
    getHelper:function(helperName){},
    getHelperCopy:function(helperName){},
    setFrontController:function(front){},
    getFrontController:function(){},
    preDispatch:function(){},
    postDispatch:function(){},
    $__call:function(methodName,args){},
    dispatch:function(action){},
    run:function(request,response){},
    $_getParam:function(paramName,$default){},
    $_setParam:function(paramName,value){},
    $_hasParam:function(paramName){},
    $_getAllParams:function(){},
    $_forward:function(action,controller,module,params){},
    $_redirect:function(url,options){}
}

Application_Plugin_Extension_DijitEditor = {
    $_params:null,
    $_isParamsDirty:null,
    $_id:null,
    render:function(){},
    setUp:function(){},
    tearDown:function(){},
    getParams:function(){},
    getParam:function(key,$default){},
    setParams:function(params){},
    setParam:function(name,value){},
    isParamsDirty:function(){},
    clearParamsDirty:function(){},
    getId:function(){},
    setId:function(id){},
    $__construct:function(params){},
    setValue:function(key,value){},
    setValues:function(values){},
    getValue:function(key){},
    getValues:function(){}
}

Azf_Plugin_Extension_Abstract = {
    $_params:null,
    $_isParamsDirty:null,
    $_id:null,
    getParams:function(){},
    getParam:function(key,$default){},
    setParams:function(params){},
    setParam:function(name,value){},
    isParamsDirty:function(){},
    clearParamsDirty:function(){},
    getId:function(){},
    setId:function(id){},
    $__construct:function(params){},
    setValue:function(key,value){},
    setValues:function(values){},
    getValue:function(key){},
    getValues:function(){},
    setUp:function(){},
    tearDown:function(){},
    render:function(){}
}

Application_Model_DbTable_User = {
    $_name:null,
    $_primary:null,
    $_defaultDb:null,
    $_definition:null,
    $_definitionConfigName:null,
    $_defaultMetadataCache:null,
    $_db:null,
    $_schema:null,
    $_cols:null,
    $_identity:null,
    $_sequence:null,
    $_metadata:null,
    $_metadataCache:null,
    $_metadataCacheInClass:null,
    $_rowClass:null,
    $_rowsetClass:null,
    $_referenceMap:null,
    $_dependentTables:null,
    $_defaultSource:null,
    $_defaultValues:null,
    $__construct:function(config){},
    setOptions:function(options){},
    setDefinition:function(definition){},
    getDefinition:function(){},
    setDefinitionConfigName:function(definitionConfigName){},
    getDefinitionConfigName:function(){},
    setRowClass:function(classname){},
    getRowClass:function(){},
    setRowsetClass:function(classname){},
    getRowsetClass:function(){},
    addReference:function(ruleKey,columns,refTableClass,refColumns,onDelete,onUpdate){},
    setReferences:function(referenceMap){},
    getReference:function(tableClassname,ruleKey){},
    setDependentTables:function(dependentTables){},
    getDependentTables:function(){},
    setDefaultSource:function(defaultSource){},
    getDefaultSource:function(){},
    setDefaultValues:function(defaultValues){},
    getDefaultValues:function(){},
    setDefaultAdapter:function(db){},
    getDefaultAdapter:function(){},
    $_setAdapter:function(db){},
    getAdapter:function(){},
    $_setupAdapter:function(db){},
    setDefaultMetadataCache:function(metadataCache){},
    getDefaultMetadataCache:function(){},
    $_setMetadataCache:function(metadataCache){},
    getMetadataCache:function(){},
    setMetadataCacheInClass:function(flag){},
    metadataCacheInClass:function(){},
    $_setupMetadataCache:function(metadataCache){},
    $_setSequence:function(sequence){},
    $_setup:function(){},
    $_setupDatabaseAdapter:function(){},
    $_setupTableName:function(){},
    $_setupMetadata:function(){},
    $_getCols:function(){},
    $_setupPrimaryKey:function(){},
    $_getReferenceMapNormalized:function(){},
    init:function(){},
    info:function(key){},
    select:function(withFromPart){},
    insert:function(data){},
    isIdentity:function(column){},
    update:function(data,$where){},
    $_cascadeUpdate:function(parentTableClassname,oldPrimaryKey,newPrimaryKey){},
    $delete:function($where){},
    $_cascadeDelete:function(parentTableClassname,primaryKey){},
    find:function(){},
    fetchAll:function($where,order,count,offset){},
    fetchRow:function($where,order,offset){},
    fetchNew:function(){},
    createRow:function(data,defaultSource){},
    $_where:function(select,$where){},
    $_order:function(select,order){},
    $_fetch:function(select){}
}



Application_Rest_User = {
    request:null,
    isAllowed:function(request,method,id){},
    $delete:function(request,response){},
    get:function(request,response){},
    index:function(request,response){},
    post:function(request,response){},
    put:function(request,response){},
    getRequest:function(){},
    setRequest:function(request){},
    init:function(){},
    $_uninit:function(){}
}

Azf_Rest_Provider_Abstract = {
    request:null,
    getRequest:function(){},
    setRequest:function(request){},
    init:function(){},
    $_uninit:function(){},
    isAllowed:function(request,method,id){},
    index:function(request,response){},
    get:function(request,response){},
    post:function(request,response){},
    put:function(request,response){},
    $delete:function(request,response){}
}

Application_Rest_Navigation = {
    request:null,
    isAllowed:function(request,method,id){},
    $delete:function(request,response){},
    get:function(request,response){},
    index:function(request,response){},
    post:function(request,response){},
    put:function(request,response){},
    getRequest:function(){},
    setRequest:function(request){},
    init:function(){},
    $_uninit:function(){}
}

User_Bootstrap = {
    $_appNamespace:null,
    $_resourceLoader:null,
    $_application:null,
    $_classResources:null,
    $_container:null,
    $_environment:null,
    $_optionKeys:null,
    $_options:null,
    $_pluginLoader:null,
    $_pluginResources:null,
    $_run:null,
    $_started:null,
    $_initRest:function(){},
    $_initRestLoaderResource:function(){},
    run:function(){},
    $__construct:function(application){},
    setResourceLoader:function(loader){},
    getResourceLoader:function(){},
    getAppNamespace:function(){},
    setAppNamespace:function(value){},
    setOptions:function(options){},
    getOptions:function(){},
    hasOption:function(key){},
    getOption:function(key){},
    mergeOptions:function(array1,array2){},
    getClassResources:function(){},
    getClassResourceNames:function(){},
    registerPluginResource:function(resource,options){},
    unregisterPluginResource:function(resource){},
    hasPluginResource:function(resource){},
    getPluginResource:function(resource){},
    getPluginResources:function(){},
    getPluginResourceNames:function(){},
    setPluginLoader:function(loader){},
    getPluginLoader:function(){},
    setApplication:function(application){},
    getApplication:function(){},
    getEnvironment:function(){},
    setContainer:function(container){},
    getContainer:function(){},
    hasResource:function(name){},
    getResource:function(name){},
    $__get:function(prop){},
    $__isset:function(prop){},
    bootstrap:function(resource){},
    $__call:function(method,args){},
    $_bootstrap:function(resource){},
    $_executeResource:function(resource){},
    $_loadPluginResource:function(resource,options){},
    $_markRun:function(resource){},
    $_resolvePluginResourceName:function(resource){}
}

User_Rest_SessionStore = {
    records:null,
    session:null,
    requestFrom:null,
    requestCount:null,
    sortFields:null,
    filterFields:null,
    request:null,
    $_initRecords:function(session){},
    init:function(){},
    $_uninit:function(){},
    $delete:function(request,response){},
    get:function(request,response){},
    index:function(request,response){},
    isAllowed:function(request,method,id){},
    post:function(request,response){},
    put:function(request,response){},
    getRequestFrom:function(){},
    getRequestCount:function(){},
    setContentRange:function(available,from,count){},
    $_initRangeHeader:function(){},
    $_parseSortFields:function(){},
    $_parseFilterFields:function(){},
    getSortableFields:function(){},
    getFilterableFields:function(){},
    getMaxPageSize:function(){},
    getRequest:function(){},
    setRequest:function(request){}
}

Azf_Rest_Provider_DojoStore = {
    requestFrom:null,
    requestCount:null,
    sortFields:null,
    filterFields:null,
    request:null,
    getRequestFrom:function(){},
    getRequestCount:function(){},
    setContentRange:function(available,from,count){},
    $_initRangeHeader:function(){},
    $_parseSortFields:function(){},
    $_parseFilterFields:function(){},
    init:function(){},
    getSortableFields:function(){},
    getFilterableFields:function(){},
    getMaxPageSize:function(){},
    getRequest:function(){},
    setRequest:function(request){},
    $_uninit:function(){},
    isAllowed:function(request,method,id){},
    index:function(request,response){},
    get:function(request,response){},
    post:function(request,response){},
    put:function(request,response){},
    $delete:function(request,response){}
}

User_Rest_User = {
    requestFrom:null,
    requestCount:null,
    sortFields:null,
    filterFields:null,
    request:null,
    getSortableFields:function(){},
    getFilterableFields:function(){},
    $delete:function(request,response){},
    get:function(request,response){},
    index:function(request,response){},
    isAllowed:function(request,method,id){},
    post:function(request,response){},
    put:function(request,response){},
    getRequestFrom:function(){},
    getRequestCount:function(){},
    setContentRange:function(available,from,count){},
    $_initRangeHeader:function(){},
    $_parseSortFields:function(){},
    $_parseFilterFields:function(){},
    init:function(){},
    getMaxPageSize:function(){},
    getRequest:function(){},
    setRequest:function(request){},
    $_uninit:function(){}
}

Application_Resolver_Model = {
    registeredNamespace:null,
    namespaces:null,
    parameters:null,
    initialize:function(){},
    $_getModelClass:function(namespace){},
    $_classExists:function(className){},
    isAllowed:function(namespaces,parameters){},
    $_execute:function(namespaces,parameters){},
    $_normalizeResponse:function(response){},
    getInstance:function($class){},
    getRegisteredNamespace:function(){},
    setRegisteredNamespace:function(registeredNamespace){},
    getNamespaces:function(){},
    setNamespaces:function(namespaces){},
    getParameters:function(){},
    setParameters:function(parameters){},
    execute:function(registeredNamespace,namespaces,parameters){}
}

Azf_Service_Lang_Resolver = {
    registeredNamespace:null,
    namespaces:null,
    parameters:null,
    getRegisteredNamespace:function(){},
    setRegisteredNamespace:function(registeredNamespace){},
    getNamespaces:function(){},
    setNamespaces:function(namespaces){},
    getParameters:function(){},
    setParameters:function(parameters){},
    execute:function(registeredNamespace,namespaces,parameters){},
    initialize:function(){},
    $_execute:function(namespaces,parameters){},
    isAllowed:function(namespaces,parameters){}
}

Application_Resolver_Filesystem = {
    $_baseDir:null,
    registeredNamespace:null,
    namespaces:null,
    parameters:null,
    initialize:function(){},
    isAllowed:function(namespaces,parameters){},
    setBaseDir:function(path){},
    getBaseDir:function(){},
    constructRealPath:function(path){},
    normalizeFilter:function(filter){},
    getDirectoryIterator:function(path){},
    getDirectoryFileList:function(directory,filter){},
    getFileListMethod:function(directory,filter){},
    isPathSecure:function(path){},
    uploadFilesMethod:function(dirname){},
    deleteFilesMethod:function(files){},
    deleteFile:function(file){},
    $_isUploadedFile:function(file){},
    $_moveUploadedFile:function(source,destination){},
    isFileArray:function(file,requiredKeys){},
    createDirectoryMethod:function(directory){},
    getRegisteredNamespace:function(){},
    setRegisteredNamespace:function(registeredNamespace){},
    getNamespaces:function(){},
    setNamespaces:function(namespaces){},
    getParameters:function(){},
    setParameters:function(parameters){},
    execute:function(registeredNamespace,namespaces,parameters){},
    $_execute:function(namespaces,parameters){}
}

Application_Resolver_PluginDescriptor = {
    registeredNamespace:null,
    namespaces:null,
    parameters:null,
    initialize:function(){},
    $_execute:function(namespaces,parameters){},
    isAllowed:function(namespaces,parameters){},
    getContentPlugins:function(){},
    getExtensionPlugins:function(){},
    getRegisteredNamespace:function(){},
    setRegisteredNamespace:function(registeredNamespace){},
    getNamespaces:function(){},
    setNamespaces:function(namespaces){},
    getParameters:function(){},
    setParameters:function(parameters){},
    execute:function(registeredNamespace,namespaces,parameters){}
}

Application_Resolver_Template = {
    template:null,
    navigationModel:null,
    registeredNamespace:null,
    namespaces:null,
    parameters:null,
    getTemplate:function(){},
    setTemplate:function(template){},
    getNavigationModel:function(){},
    setNavigationModel:function(navigationModel){},
    initialize:function(){},
    isAllowed:function(namespaces,parameters){},
    $_execute:function(namespaces,parameters){},
    getTemplateRegionsMethod:function(templateIdentifier){},
    getTemplateRegionsForNavigationMethod:function(navigationId){},
    getRegisteredNamespace:function(){},
    setRegisteredNamespace:function(registeredNamespace){},
    getNamespaces:function(){},
    setNamespaces:function(namespaces){},
    getParameters:function(){},
    setParameters:function(parameters){},
    execute:function(registeredNamespace,namespaces,parameters){}
}

Application_Resolver_Doh = {
    registeredNamespace:null,
    namespaces:null,
    parameters:null,
    isAllowed:function(namespaces,parameters){},
    uploadFilesMethod:function(){},
    getRegisteredNamespace:function(){},
    setRegisteredNamespace:function(registeredNamespace){},
    getNamespaces:function(){},
    setNamespaces:function(namespaces){},
    getParameters:function(){},
    setParameters:function(parameters){},
    execute:function(registeredNamespace,namespaces,parameters){},
    initialize:function(){},
    $_execute:function(namespaces,parameters){}
}

Application_Resolver_ExtensionPlugin = {
    manager:null,
    model:null,
    navigationPluginModel:null,
    registeredNamespace:null,
    namespaces:null,
    parameters:null,
    getManager:function(){},
    setManager:function(manager){},
    $_initManager:function(){},
    getModel:function(){},
    setModel:function(model){},
    $_initModel:function(){},
    getNavigationPluginModel:function(){},
    $_initNavigationPluginModel:function(){},
    setNavigationPluginModel:function(navigationPluginModel){},
    addExtensionPluginMethod:function(navigationId,name,description,type,region,weight,enable){},
    removeExtensionPluginMethod:function(pluginId){},
    enableExtensionPluginMethod:function(nodeId,pluginId,weight){},
    disableExtensionPluginMethod:function(nodeId,pluginId){},
    getRegionExtensionPluginsMethod:function(nodeId,region){},
    setExtensionPluginValuesMethod:function(navigationId,pluginId,name,description,type,weight,enable){},
    findPluginsByNavigationAndRegionMethod:function(navigationId,region){},
    $_execute:function(namespaces,parameters){},
    setExtensionValueMethod:function(pluginId,key,value){},
    setExtensionValuesMethod:function(pluginId,values){},
    getExtensionValueMethod:function(pluginId,key){},
    getExtensionValuesMethod:function(pluginId){},
    isAllowed:function(namespaces,parameters){},
    getRegisteredNamespace:function(){},
    setRegisteredNamespace:function(registeredNamespace){},
    getNamespaces:function(){},
    setNamespaces:function(namespaces){},
    getParameters:function(){},
    setParameters:function(parameters){},
    execute:function(registeredNamespace,namespaces,parameters){},
    initialize:function(){}
}

Application_Resolver_User = {
    userModel:null,
    registeredNamespace:null,
    namespaces:null,
    parameters:null,
    getUserModel:function(){},
    setUserModel:function(userModel){},
    initialize:function(){},
    isAllowed:function(namespaces,parameters){},
    $_execute:function(namespaces,parameters){},
    getRegisteredNamespace:function(){},
    setRegisteredNamespace:function(registeredNamespace){},
    getNamespaces:function(){},
    setNamespaces:function(namespaces){},
    getParameters:function(){},
    setParameters:function(parameters){},
    execute:function(registeredNamespace,namespaces,parameters){}
}

Application_Resolver_Navigation = {
    navigation:null,
    pluginDescriptor:null,
    frontController:null,
    route:null,
    registeredNamespace:null,
    namespaces:null,
    parameters:null,
    getNavigation:function(){},
    setNavigation:function(navigation){},
    $_initPluginDescriptor:function(){},
    getPluginDescriptor:function(){},
    setPluginDescriptor:function(pluginDescriptor){},
    getFrontController:function(){},
    setFrontController:function(frontController){},
    getRoute:function(){},
    setRoute:function(route){},
    initialize:function(){},
    $_execute:function(namespaces,parameters){},
    overrideGetContentPlugins:function(){},
    overrideGetExtensionPlugins:function(){},
    overrideInsertInto:function(intoId,value,pluginIdentifier){},
    $_prepareInseredPage:function(id,pluginIdentifier){},
    overrideDeleteNode:function(nodeId){},
    overrideSetContent:function(id,key,content){},
    overrideGetContent:function(id,key){},
    overrideSetHomePage:function(navigationId){},
    getHomeNode:function(){},
    $_deleteBranch:function(node){},
    $_getFrontController:function(){},
    $_initBootstrapEnv:function(env){},
    $_callMvc:function(id,mvcParams,inEnvironment){},
    isAllowed:function(namespaces,parameters){},
    getRegisteredNamespace:function(){},
    setRegisteredNamespace:function(registeredNamespace){},
    getNamespaces:function(){},
    setNamespaces:function(namespaces){},
    getParameters:function(){},
    setParameters:function(parameters){},
    execute:function(registeredNamespace,namespaces,parameters){}
}

Azf_Rpc_Provider_Abstract = {

    }

Azf_Rpc_Server = {
    requestArgs:null,
    rpcServer:null,
    providerClassName:null,
    providerInstance:null,
    getRequestArgs:function(){},
    getRequestArg:function(name,$default){},
    setRequestArgs:function(requestArgs){},
    getRpcServer:function(){},
    setRpcServer:function(rpcServer){},
    getProviderClassName:function(){},
    setProviderClassName:function(providerClassName){},
    getProviderInstance:function(){},
    setProviderInstance:function(providerInstance){},
    getModuleName:function(){},
    getProviderName:function(){},
    $__construct:function(){},
    $_init:function(){},
    $_initJsonServer:function(){},
    $_initRequestArgs:function(){},
    $_initModule:function(){},
    $_initClassName:function(){},
    $_initClassInstance:function(){},
    $_isAllowed:function(){},
    $_initProvider:function(){},
    handle:function(){}
}







Azf_Plugin_Extension_Manager = {
    $_model:null,
    setUp:function(type,pluginId){},
    tearDown:function(type,pluginId){},
    render:function(navigationId){},
    $_saveParams:function(instance){},
    $_getPluginInstance:function(type,pluginId,pluginParams){},
    getPluginDefinitions:function(navigationId){},
    getModel:function(){},
    getNavigationModel:function(){},
    setNavigationModel:function(navigationModel){},
    $_initModel:function(){},
    setModel:function(model){},
    getClassName:function(type){},
    $_constructPlugin:function(type,pluginParams){},
    setValue:function(pluginId,key,value){},
    setValues:function(pluginId,values){},
    getValue:function(pluginId,key){},
    getValues:function(pluginId){}
}

Azf_Plugin_Descriptor_Parser_Content = {
    schema:null,
    $_parse:function(stringData){},
    $_getSchemaFileName:function(){},
    parseFileDescriptor:function(fd){},
    parseFile:function(filePath){},
    $_getSchema:function(){},
    $_getDomDocument:function(){},
    $_getSimpleXmlElement:function(content){},
    $_handle:function(content){}
}

Azf_Plugin_Descriptor_Parser_Abstract = {
    schema:null,
    $_parse:function(stringData){},
    $_getSchemaFileName:function(){},
    parseFileDescriptor:function(fd){},
    parseFile:function(filePath){},
    $_getSchema:function(){},
    $_getDomDocument:function(){},
    $_getSimpleXmlElement:function(content){},
    $_handle:function(content){}
}



Azf_Plugin_Descriptor_Parser_Exception = {
    message:null,
    code:null,
    file:null,
    line:null,
    $__construct:function(msg,code,previous){},
    $__call:function(method,args){},
    $__toString:function(){},
    $_getPrevious:function(){},
    $__clone:function(){},
    getMessage:function(){},
    getCode:function(){},
    getFile:function(){},
    getLine:function(){},
    getTrace:function(){},
    getPrevious:function(){},
    getTraceAsString:function(){}
}

Azf_Plugin_Descriptor_Parser_Extension = {
    schema:null,
    $_parse:function(stringData){},
    $_getSchemaFileName:function(){},
    parseFileDescriptor:function(fd){},
    parseFile:function(filePath){},
    $_getSchema:function(){},
    $_getDomDocument:function(){},
    $_getSimpleXmlElement:function(content){},
    $_handle:function(content){}
}

Azf_Plugin_Descriptor = {
    $_contentPlugins:null,
    $_extensionPlugins:null,
    getContentPlugins:function(){},
    setContentPlugins:function(contentPlugins){},
    addContentPlugin:function(plugin){},
    getExtensionPlugins:function(){},
    addExtensionPlugin:function(plugin){},
    setExtensionPlugins:function(extensionPlugins){},
    getContentPlugin:function(pluginIdentifier){},
    getExtensionPlugin:function(pluginIdentifier){},
    $_findPlugin:function(identifier,plugins){},
    $__construct:function(){},
    $_getContentPluginDirectoryIterator:function(){},
    $_getExtensionPluginDirectoryIterator:function(){},
    $_loadPlugins:function(pdi,pp){},
    $_loadExtensionPlugins:function(){},
    $_loadContentPlugins:function(){}
}

Azf_Descriptor_Template = {

    }

Azf_Service_Lang = {
    resolvers:null,
    tokenizer:null,
    validator:null,
    processor:null,
    getResolvers:function(){},
    setResolvers:function(resolvers){},
    setResolver:function(namespace,resolver){},
    getTokenizer:function(){},
    setTokenizer:function(tokenizer){},
    getValidator:function(){},
    setValidator:function(validator){},
    getProcessor:function(){},
    setProcessor:function(processor){},
    $_initializeTokenizer:function(){},
    $_initializeValidator:function(){},
    $_initializeProcessor:function(){},
    execute:function(expression){},
    executeAndJson:function(expr){}
}

Azf_Service_Lang_Parser = {
    descriptor:null,
    token:null,
    tokenType:null,
    expression:null,
    expLen:null,
    pos:null,
    getDescriptor:function(){},
    setDescriptor:function(descriptor){},
    getToken:function(){},
    setToken:function(token){},
    getTokenType:function(){},
    setTokenType:function(tokenType){},
    getExpression:function(){},
    setExpression:function(expression){},
    $__construct:function(){},
    parse:function(expression){},
    parseNext:function(){},
    $_parseExpression:function(){}
}

Azf_Service_Lang_Resolver_Auto = {
    $_loadedClasses:null,
    registeredNamespace:null,
    namespaces:null,
    parameters:null,
    $_execute:function(namespaces,parameters){},
    $_executeDefaultModuleResolver:function(namespaces,parameters){},
    $_executeNamedModuleResolver:function(namespaces,parameters){},
    $_loadClass:function(className){},
    $_executeResolver:function(resolver,classNamespace,method,parameters){},
    isAllowed:function(namespaces,parameters){},
    getRegisteredNamespace:function(){},
    setRegisteredNamespace:function(registeredNamespace){},
    getNamespaces:function(){},
    setNamespaces:function(namespaces){},
    getParameters:function(){},
    setParameters:function(parameters){},
    execute:function(registeredNamespace,namespaces,parameters){},
    initialize:function(){}
}

Azf_Service_Lang_Tokenizer = {
    instance:null,
    query:null,
    pos:null,
    len:null,
    tokenize:function(query){},
    nextToken:function(){},
    getString:function(){},
    getQuotedString:function(){},
    getDQuotedString:function(){},
    getNumber:function(){},
    getWhitespace:function(){},
    getInstance:function(){}
}

Azf_Service_Lang_Processor = {
    context:null,
    data:null,
    resolvers:null,
    pushContext:function(context,data){},
    popContext:function(){},
    getCurrentContext:function(){},
    getResolvers:function(){},
    setResolvers:function(resolvers){},
    addResolver:function(namespace,resolver){},
    getResover:function(namespace){},
    removeResolver:function(namespace){},
    hasResolver:function(namespace){},
    addValue:function(value){},
    $_addArrayValue:function(value,context){},
    $_addDictKey:function(value,context){},
    $_addDictValue:function(value,context){},
    $_addMethodNamespace:function(value,context){},
    $_addMethodparameter:function(value,context){},
    $_addInitialValue:function(value,context){},
    $_reset:function(){},
    $_executeMethod:function(metadata){},
    process:function(tokens){},
    $_process:function(t){},
    $_processChar:function(t,context){},
    $_processArray:function(t,context){},
    $_processString:function(string,context){},
    $_processNumber:function(number,context){},
    $_processQuotedString:function(string,context){},
    $_processOpenParenthese:function(context){},
    $_processCloseParenthese:function(context){},
    $_processOpenSquareBracket:function(context){},
    $_processCloseSquareBracket:function(context){},
    $_processOpenCurlyBracket:function(context){},
    $_processCloseCurlyBracket:function(context){}
}



Azf_Service_Lang_Validator = {
    context:null,
    tValue:null,
    pushContext:function(context){},
    popContext:function(){},
    getCurrentContext:function(){},
    getDataTokens:function(addTokens){},
    getDictKeyTokens:function(addTokens){},
    validate:function(tokens){},
    validateToken:function(bt,t){},
    validateContext:function(t){},
    inArray:function(t,tokens){},
    $_validateInitial:function(t){},
    $_validateRootContext:function(t){},
    $_validateTString:function(t){},
    $_validateTNumber:function(t){},
    $_validateTQuotedString:function(t){},
    $_validateNamespace:function(t){},
    $_validateSeparator:function(t){},
    $_validateOpenParenthese:function(t){},
    $_validateCloseParenthese:function(t){},
    $_validateMethodParamContext:function(t){},
    $_validateMethodSeparator:function(t){},
    $_validateOpenSquareBracket:function(t){},
    $_validateArrayValueContext:function(t){},
    $_validateArraySeparator:function(t){},
    $_validateCloseSquareBracket:function(t){},
    $_validateOpenCurlyBracket:function(t){},
    $_validateDictionaryKeyContext:function(t){},
    $_validateDictionaryValueBinding:function(t){},
    $_validateDictionaryValueContext:function(t){},
    $_validateDictionarySeparator:function(t){},
    $_validateCloseCurlyBracket:function(t){}
}

Azf_Template_Descriptor = {
    $_templates:null,
    $_templateDirectoryPath:null,
    $_classPath:null,
    setTemplates:function(templates){},
    getTemplates:function(){},
    getTemplate:function(templateIdentifier){},
    getRegions:function(templateIdentifier){},
    getTemplateDirectoryPath:function(){},
    setTemplateDirectoryPath:function(path){},
    getClassPath:function(){},
    setClassPath:function(classPath){},
    getSchemaSource:function(){},
    templateToArray:function(document){},
    $_initTemplateDirectoryPath:function(){},
    $_initTemplates:function(){},
    $_buildPotentialTemplateFilePaths:function(){},
    $_parseTemplateFiles:function(templateFilePaths){}
}

Azf_Rest_Response = {
    body:null,
    responseCode:null,
    getBody:function(){},
    setBody:function(body){},
    addBody:function(body){},
    getResponseCode:function(){},
    setResponseCode:function(response){},
    doResponse:function(){}
}

Azf_Rest_Request = {
    $_request:null,
    $_queryArgs:null,
    $_parsedArgs:null,
    $_parsedBody:null,
    $_isValid:null,
    getMethod:function(){},
    getModuleName:function(){},
    getProviderName:function(){},
    getId:function(){},
    getBody:function(){},
    isValid:function(){},
    getQueryArg:function(name,$default){},
    getRequestArg:function(name,$default){},
    $__construct:function(request,queryArgs){},
    $_init:function(){},
    $_initRequestEnv:function(){},
    $_parseArgs:function(){},
    $_parseBody:function(){}
}





Azf_Rest_Server = {
    request:null,
    response:null,
    provider:null,
    getRequest:function(){},
    setRequest:function(request){},
    getResponse:function(){},
    setResponse:function(response){},
    getProvider:function(){},
    setProvider:function(provider){},
    $__construct:function(){},
    $_init:function(){},
    $_initRequest:function(){},
    $_initResponse:function(){},
    $_initModule:function(){},
    $_initProvider:function(){},
    $_handle:function(){},
    $_isAllowed:function(provider){},
    handle:function(){}
}

Azf_View_Helper_Navigation = {
    navigation:null,
    $_menuTree:null,
    $_contextMenus:null,
    $_contextId:null,
    $_breadCrumbs:null,
    view:null,
    direct:function(){},
    getNavigation:function(){},
    $_getMenuTree:function(){},
    $_setMenuTree:function(menuTree){},
    setMenuTree:function(menuTree){},
    setContextMenus:function(contextMenus){},
    getContextId:function(){},
    setContextId:function(contextId){},
    setNavigation:function(navigation){},
    $_parseNodes:function(node){},
    getTree:function(){},
    getContext:function(){},
    $_initContextMenus:function(){},
    $_searchContextMenu:function(menuTree,contextId){},
    setBreadCrumbs:function(_breadCrumbs){},
    getBreadCrumbs:function(){},
    $_constructBreadCrumbs:function(menuTree,contextId,breadcrumbs){},
    setView:function(view){}
}

Zend_View_Helper_Abstract = {
    view:null,
    setView:function(view){},
    direct:function(){}
}





Azf_Controller_Action_Helper_Bootstrap = {
    $_actionController:null,
    $_frontController:null,
    preDispatch:function(){},
    postDispatch:function(){},
    $_initViewHelpers:function(){},
    $_registerNavigationViewHelper:function(view){},
    $_renderExtensionPlugins:function(){},
    setActionController:function(actionController){},
    getActionController:function(){},
    getFrontController:function(){},
    init:function(){},
    getRequest:function(){},
    getResponse:function(){},
    getName:function(){}
}

Azf_Controller_Action_Helper_Context = {
    navigationModel:null,
    contextId:null,
    $_actionController:null,
    $_frontController:null,
    getNavigationModel:function(){},
    setNavigationModel:function(model){},
    getContextId:function(){},
    setContextId:function(id){},
    init:function(){},
    getStaticParam:function(name,$default){},
    getStaticParams:function(){},
    getDynamicParam:function(name,$default){},
    getDynamicParams:function(){},
    getPluginParam:function(plugin,name,$default){},
    getPluginParams:function(plugin){},
    getPluginNames:function(){},
    setActionController:function(actionController){},
    getActionController:function(){},
    getFrontController:function(){},
    preDispatch:function(){},
    postDispatch:function(){},
    getRequest:function(){},
    getResponse:function(){},
    getName:function(){}
}

Azf_Controller_Router_Route_Fixed = {
    $_params:null,
    $_isAbstract:null,
    $_matchedPath:null,
    getParams:function(){},
    setParams:function(params){},
    $__construct:function(params){},
    assemble:function(data,reset,encode){},
    match:function(path){},
    getInstance:function(config){},
    getVersion:function(){},
    setMatchedPath:function(path){},
    getMatchedPath:function(){},
    isAbstract:function(flag){},
    chain:function(route,separator){}
}



Azf_Model_UserACL = {
    $_name:null,
    $_primary:null,
    $_defaultDb:null,
    $_definition:null,
    $_definitionConfigName:null,
    $_defaultMetadataCache:null,
    $_db:null,
    $_schema:null,
    $_cols:null,
    $_identity:null,
    $_sequence:null,
    $_metadata:null,
    $_metadataCache:null,
    $_metadataCacheInClass:null,
    $_rowClass:null,
    $_rowsetClass:null,
    $_referenceMap:null,
    $_dependentTables:null,
    $_defaultSource:null,
    $_defaultValues:null,
    bind:function(userId,aclGroupId){},
    unBind:function(userId,aclGroupId){},
    $__construct:function(config){},
    setOptions:function(options){},
    setDefinition:function(definition){},
    getDefinition:function(){},
    setDefinitionConfigName:function(definitionConfigName){},
    getDefinitionConfigName:function(){},
    setRowClass:function(classname){},
    getRowClass:function(){},
    setRowsetClass:function(classname){},
    getRowsetClass:function(){},
    addReference:function(ruleKey,columns,refTableClass,refColumns,onDelete,onUpdate){},
    setReferences:function(referenceMap){},
    getReference:function(tableClassname,ruleKey){},
    setDependentTables:function(dependentTables){},
    getDependentTables:function(){},
    setDefaultSource:function(defaultSource){},
    getDefaultSource:function(){},
    setDefaultValues:function(defaultValues){},
    getDefaultValues:function(){},
    setDefaultAdapter:function(db){},
    getDefaultAdapter:function(){},
    $_setAdapter:function(db){},
    getAdapter:function(){},
    $_setupAdapter:function(db){},
    setDefaultMetadataCache:function(metadataCache){},
    getDefaultMetadataCache:function(){},
    $_setMetadataCache:function(metadataCache){},
    getMetadataCache:function(){},
    setMetadataCacheInClass:function(flag){},
    metadataCacheInClass:function(){},
    $_setupMetadataCache:function(metadataCache){},
    $_setSequence:function(sequence){},
    $_setup:function(){},
    $_setupDatabaseAdapter:function(){},
    $_setupTableName:function(){},
    $_setupMetadata:function(){},
    $_getCols:function(){},
    $_setupPrimaryKey:function(){},
    $_getReferenceMapNormalized:function(){},
    init:function(){},
    info:function(key){},
    select:function(withFromPart){},
    insert:function(data){},
    isIdentity:function(column){},
    update:function(data,$where){},
    $_cascadeUpdate:function(parentTableClassname,oldPrimaryKey,newPrimaryKey){},
    $delete:function($where){},
    $_cascadeDelete:function(parentTableClassname,primaryKey){},
    find:function(){},
    fetchAll:function($where,order,count,offset){},
    fetchRow:function($where,order,offset){},
    fetchNew:function(){},
    createRow:function(data,defaultSource){},
    $_where:function(select,$where){},
    $_order:function(select,order){},
    $_fetch:function(select){}
}

Azf_Model_Tree_Default = {
    $_name:null,
    tid:null,
    $_defaultDb:null,
    $_definition:null,
    $_definitionConfigName:null,
    $_defaultMetadataCache:null,
    $_db:null,
    $_schema:null,
    $_cols:null,
    $_primary:null,
    $_identity:null,
    $_sequence:null,
    $_metadata:null,
    $_metadataCache:null,
    $_metadataCacheInClass:null,
    $_rowClass:null,
    $_rowsetClass:null,
    $_referenceMap:null,
    $_dependentTables:null,
    $_defaultSource:null,
    $_defaultValues:null,
    $_find:function(id){},
    insertNode:function(l,r,parentId,value){},
    createTemporaryTable:function(){},
    moveNodeIntoTemporaryTable:function(node){},
    mergeTemporaryTable:function(){},
    dropTemporaryTable:function(){},
    parseNode:function(r){},
    getTableName:function(){},
    getTemporaryTableName:function(){},
    getTid:function(){},
    setTid:function(tid){},
    find:function(id){},
    $_insertNode:function(l,r,parentId,value){},
    $_parseNode:function(r){},
    $_startTransaction:function(){},
    $_lockTable:function(){},
    $_endTransaction:function(){},
    $_unlockTable:function(){},
    $_rollBackTransaction:function(){},
    $_createTemporaryTable:function(){},
    $_moveNodeIntoTemporaryTable:function(node){},
    $_mergeTemporaryTable:function(){},
    $_dropTemporaryTable:function(){},
    $_parseCols:function(cols,tablePrefix){},
    initTree:function(value){},
    isTreeValid:function(){},
    insertInto:function(id,value){},
    insertAfter:function(id,value){},
    insertBefore:function(id,value){},
    $delete:function(id){},
    deleteTree:function(){},
    moveInto:function(targetId,dstId){},
    moveBefore:function(targetId,dstId){},
    moveAfter:function(targetId,dstId){},
    getTree:function(cols,showMetadataColumns){},
    getParents:function(id,cols,showMetadataColumns){},
    $_unsetAllTreeMetadata:function(tree){},
    $_unsetPartialTreeMetadata:function(tree,cols){},
    $_parseTree:function(stmt,cols,showMetadataColumns){},
    getBranch:function(id,cols,showMetadataColumns){},
    getVisible:function(id,cols,showMetadataColumns){},
    getRootNode:function(cols,showMetadataColumns){},
    $__construct:function(config){},
    setOptions:function(options){},
    setDefinition:function(definition){},
    getDefinition:function(){},
    setDefinitionConfigName:function(definitionConfigName){},
    getDefinitionConfigName:function(){},
    setRowClass:function(classname){},
    getRowClass:function(){},
    setRowsetClass:function(classname){},
    getRowsetClass:function(){},
    addReference:function(ruleKey,columns,refTableClass,refColumns,onDelete,onUpdate){},
    setReferences:function(referenceMap){},
    getReference:function(tableClassname,ruleKey){},
    setDependentTables:function(dependentTables){},
    getDependentTables:function(){},
    setDefaultSource:function(defaultSource){},
    getDefaultSource:function(){},
    setDefaultValues:function(defaultValues){},
    getDefaultValues:function(){},
    setDefaultAdapter:function(db){},
    getDefaultAdapter:function(){},
    $_setAdapter:function(db){},
    getAdapter:function(){},
    $_setupAdapter:function(db){},
    setDefaultMetadataCache:function(metadataCache){},
    getDefaultMetadataCache:function(){},
    $_setMetadataCache:function(metadataCache){},
    getMetadataCache:function(){},
    setMetadataCacheInClass:function(flag){},
    metadataCacheInClass:function(){},
    $_setupMetadataCache:function(metadataCache){},
    $_setSequence:function(sequence){},
    $_setup:function(){},
    $_setupDatabaseAdapter:function(){},
    $_setupTableName:function(){},
    $_setupMetadata:function(){},
    $_getCols:function(){},
    $_setupPrimaryKey:function(){},
    $_getReferenceMapNormalized:function(){},
    init:function(){},
    info:function(key){},
    select:function(withFromPart){},
    insert:function(data){},
    isIdentity:function(column){},
    update:function(data,$where){},
    $_cascadeUpdate:function(parentTableClassname,oldPrimaryKey,newPrimaryKey){},
    $_cascadeDelete:function(parentTableClassname,primaryKey){},
    fetchAll:function($where,order,count,offset){},
    fetchRow:function($where,order,offset){},
    fetchNew:function(){},
    createRow:function(data,defaultSource){},
    $_where:function(select,$where){},
    $_order:function(select,order){},
    $_fetch:function(select){}
}





Azf_Model_ACLGroup = {
    $_name:null,
    $_primary:null,
    $_defaultDb:null,
    $_definition:null,
    $_definitionConfigName:null,
    $_defaultMetadataCache:null,
    $_db:null,
    $_schema:null,
    $_cols:null,
    $_identity:null,
    $_sequence:null,
    $_metadata:null,
    $_metadataCache:null,
    $_metadataCacheInClass:null,
    $_rowClass:null,
    $_rowsetClass:null,
    $_referenceMap:null,
    $_dependentTables:null,
    $_defaultSource:null,
    $_defaultValues:null,
    addGroup:function(name){},
    deleteGroup:function(id){},
    getGroups:function(){},
    getGroup:function(id){},
    $__construct:function(config){},
    setOptions:function(options){},
    setDefinition:function(definition){},
    getDefinition:function(){},
    setDefinitionConfigName:function(definitionConfigName){},
    getDefinitionConfigName:function(){},
    setRowClass:function(classname){},
    getRowClass:function(){},
    setRowsetClass:function(classname){},
    getRowsetClass:function(){},
    addReference:function(ruleKey,columns,refTableClass,refColumns,onDelete,onUpdate){},
    setReferences:function(referenceMap){},
    getReference:function(tableClassname,ruleKey){},
    setDependentTables:function(dependentTables){},
    getDependentTables:function(){},
    setDefaultSource:function(defaultSource){},
    getDefaultSource:function(){},
    setDefaultValues:function(defaultValues){},
    getDefaultValues:function(){},
    setDefaultAdapter:function(db){},
    getDefaultAdapter:function(){},
    $_setAdapter:function(db){},
    getAdapter:function(){},
    $_setupAdapter:function(db){},
    setDefaultMetadataCache:function(metadataCache){},
    getDefaultMetadataCache:function(){},
    $_setMetadataCache:function(metadataCache){},
    getMetadataCache:function(){},
    setMetadataCacheInClass:function(flag){},
    metadataCacheInClass:function(){},
    $_setupMetadataCache:function(metadataCache){},
    $_setSequence:function(sequence){},
    $_setup:function(){},
    $_setupDatabaseAdapter:function(){},
    $_setupTableName:function(){},
    $_setupMetadata:function(){},
    $_getCols:function(){},
    $_setupPrimaryKey:function(){},
    $_getReferenceMapNormalized:function(){},
    init:function(){},
    info:function(key){},
    select:function(withFromPart){},
    insert:function(data){},
    isIdentity:function(column){},
    update:function(data,$where){},
    $_cascadeUpdate:function(parentTableClassname,oldPrimaryKey,newPrimaryKey){},
    $delete:function($where){},
    $_cascadeDelete:function(parentTableClassname,primaryKey){},
    find:function(){},
    fetchAll:function($where,order,count,offset){},
    fetchRow:function($where,order,offset){},
    fetchNew:function(){},
    createRow:function(data,defaultSource){},
    $_where:function(select,$where){},
    $_order:function(select,order){},
    $_fetch:function(select){}
}

Azf_Model_DbTable_NavigationPlugin = {
    $_name:null,
    $_primary:null,
    $_defaultDb:null,
    $_definition:null,
    $_definitionConfigName:null,
    $_defaultMetadataCache:null,
    $_db:null,
    $_schema:null,
    $_cols:null,
    $_identity:null,
    $_sequence:null,
    $_metadata:null,
    $_metadataCache:null,
    $_metadataCacheInClass:null,
    $_rowClass:null,
    $_rowsetClass:null,
    $_referenceMap:null,
    $_dependentTables:null,
    $_defaultSource:null,
    $_defaultValues:null,
    bind:function(navigationId,pluginId,weight){},
    unbind:function(navigationId,pluginId){},
    isBinded:function(navigationId,pluginId){},
    findAllByNavigationAndRegion:function(navigationId,regionId){},
    updateWeight:function(id,weight){},
    updateWeightByNavigationAndPluginId:function(navigationId,pluginId,weight){},
    findById:function(id){},
    $__construct:function(config){},
    setOptions:function(options){},
    setDefinition:function(definition){},
    getDefinition:function(){},
    setDefinitionConfigName:function(definitionConfigName){},
    getDefinitionConfigName:function(){},
    setRowClass:function(classname){},
    getRowClass:function(){},
    setRowsetClass:function(classname){},
    getRowsetClass:function(){},
    addReference:function(ruleKey,columns,refTableClass,refColumns,onDelete,onUpdate){},
    setReferences:function(referenceMap){},
    getReference:function(tableClassname,ruleKey){},
    setDependentTables:function(dependentTables){},
    getDependentTables:function(){},
    setDefaultSource:function(defaultSource){},
    getDefaultSource:function(){},
    setDefaultValues:function(defaultValues){},
    getDefaultValues:function(){},
    setDefaultAdapter:function(db){},
    getDefaultAdapter:function(){},
    $_setAdapter:function(db){},
    getAdapter:function(){},
    $_setupAdapter:function(db){},
    setDefaultMetadataCache:function(metadataCache){},
    getDefaultMetadataCache:function(){},
    $_setMetadataCache:function(metadataCache){},
    getMetadataCache:function(){},
    setMetadataCacheInClass:function(flag){},
    metadataCacheInClass:function(){},
    $_setupMetadataCache:function(metadataCache){},
    $_setSequence:function(sequence){},
    $_setup:function(){},
    $_setupDatabaseAdapter:function(){},
    $_setupTableName:function(){},
    $_setupMetadata:function(){},
    $_getCols:function(){},
    $_setupPrimaryKey:function(){},
    $_getReferenceMapNormalized:function(){},
    init:function(){},
    info:function(key){},
    select:function(withFromPart){},
    insert:function(data){},
    isIdentity:function(column){},
    update:function(data,$where){},
    $_cascadeUpdate:function(parentTableClassname,oldPrimaryKey,newPrimaryKey){},
    $delete:function($where){},
    $_cascadeDelete:function(parentTableClassname,primaryKey){},
    find:function(){},
    fetchAll:function($where,order,count,offset){},
    fetchRow:function($where,order,offset){},
    fetchNew:function(){},
    createRow:function(data,defaultSource){},
    $_where:function(select,$where){},
    $_order:function(select,order){},
    $_fetch:function(select){}
}

Azf_Model_DbTable_Plugin = {
    $_name:null,
    $_primary:null,
    $_defaultDb:null,
    $_definition:null,
    $_definitionConfigName:null,
    $_defaultMetadataCache:null,
    $_db:null,
    $_schema:null,
    $_cols:null,
    $_identity:null,
    $_sequence:null,
    $_metadata:null,
    $_metadataCache:null,
    $_metadataCacheInClass:null,
    $_rowClass:null,
    $_rowsetClass:null,
    $_referenceMap:null,
    $_dependentTables:null,
    $_defaultSource:null,
    $_defaultValues:null,
    insertPlugin:function(name,description,type,region,params){},
    deleteById:function(id){},
    getPluginParams:function(pluginId){},
    setPluginParams:function(pluginId,params){},
    findAllByNavigationid:function(navigationId){},
    $_recursiveCast:function(ps){},
    $_decode:function(params){},
    $_encode:function(params){},
    updatePluginValues:function(pluginId,name,description,region){},
    findById:function(pid){},
    $__construct:function(config){},
    setOptions:function(options){},
    setDefinition:function(definition){},
    getDefinition:function(){},
    setDefinitionConfigName:function(definitionConfigName){},
    getDefinitionConfigName:function(){},
    setRowClass:function(classname){},
    getRowClass:function(){},
    setRowsetClass:function(classname){},
    getRowsetClass:function(){},
    addReference:function(ruleKey,columns,refTableClass,refColumns,onDelete,onUpdate){},
    setReferences:function(referenceMap){},
    getReference:function(tableClassname,ruleKey){},
    setDependentTables:function(dependentTables){},
    getDependentTables:function(){},
    setDefaultSource:function(defaultSource){},
    getDefaultSource:function(){},
    setDefaultValues:function(defaultValues){},
    getDefaultValues:function(){},
    setDefaultAdapter:function(db){},
    getDefaultAdapter:function(){},
    $_setAdapter:function(db){},
    getAdapter:function(){},
    $_setupAdapter:function(db){},
    setDefaultMetadataCache:function(metadataCache){},
    getDefaultMetadataCache:function(){},
    $_setMetadataCache:function(metadataCache){},
    getMetadataCache:function(){},
    setMetadataCacheInClass:function(flag){},
    metadataCacheInClass:function(){},
    $_setupMetadataCache:function(metadataCache){},
    $_setSequence:function(sequence){},
    $_setup:function(){},
    $_setupDatabaseAdapter:function(){},
    $_setupTableName:function(){},
    $_setupMetadata:function(){},
    $_getCols:function(){},
    $_setupPrimaryKey:function(){},
    $_getReferenceMapNormalized:function(){},
    init:function(){},
    info:function(key){},
    select:function(withFromPart){},
    insert:function(data){},
    isIdentity:function(column){},
    update:function(data,$where){},
    $_cascadeUpdate:function(parentTableClassname,oldPrimaryKey,newPrimaryKey){},
    $delete:function($where){},
    $_cascadeDelete:function(parentTableClassname,primaryKey){},
    find:function(){},
    fetchAll:function($where,order,count,offset){},
    fetchRow:function($where,order,offset){},
    fetchNew:function(){},
    createRow:function(data,defaultSource){},
    $_where:function(select,$where){},
    $_order:function(select,order){},
    $_fetch:function(select){}
}

Azf_Model_NavigationAcl = {
    $_defaultDb:null,
    $_definition:null,
    $_definitionConfigName:null,
    $_defaultMetadataCache:null,
    $_db:null,
    $_schema:null,
    $_name:null,
    $_cols:null,
    $_primary:null,
    $_identity:null,
    $_sequence:null,
    $_metadata:null,
    $_metadataCache:null,
    $_metadataCacheInClass:null,
    $_rowClass:null,
    $_rowsetClass:null,
    $_referenceMap:null,
    $_dependentTables:null,
    $_defaultSource:null,
    $_defaultValues:null,
    bind:function(navigationId,aclGroupId){},
    unBind:function(navigationId,aclGroupId){},
    $__construct:function(config){},
    setOptions:function(options){},
    setDefinition:function(definition){},
    getDefinition:function(){},
    setDefinitionConfigName:function(definitionConfigName){},
    getDefinitionConfigName:function(){},
    setRowClass:function(classname){},
    getRowClass:function(){},
    setRowsetClass:function(classname){},
    getRowsetClass:function(){},
    addReference:function(ruleKey,columns,refTableClass,refColumns,onDelete,onUpdate){},
    setReferences:function(referenceMap){},
    getReference:function(tableClassname,ruleKey){},
    setDependentTables:function(dependentTables){},
    getDependentTables:function(){},
    setDefaultSource:function(defaultSource){},
    getDefaultSource:function(){},
    setDefaultValues:function(defaultValues){},
    getDefaultValues:function(){},
    setDefaultAdapter:function(db){},
    getDefaultAdapter:function(){},
    $_setAdapter:function(db){},
    getAdapter:function(){},
    $_setupAdapter:function(db){},
    setDefaultMetadataCache:function(metadataCache){},
    getDefaultMetadataCache:function(){},
    $_setMetadataCache:function(metadataCache){},
    getMetadataCache:function(){},
    setMetadataCacheInClass:function(flag){},
    metadataCacheInClass:function(){},
    $_setupMetadataCache:function(metadataCache){},
    $_setSequence:function(sequence){},
    $_setup:function(){},
    $_setupDatabaseAdapter:function(){},
    $_setupTableName:function(){},
    $_setupMetadata:function(){},
    $_getCols:function(){},
    $_setupPrimaryKey:function(){},
    $_getReferenceMapNormalized:function(){},
    init:function(){},
    info:function(key){},
    select:function(withFromPart){},
    insert:function(data){},
    isIdentity:function(column){},
    update:function(data,$where){},
    $_cascadeUpdate:function(parentTableClassname,oldPrimaryKey,newPrimaryKey){},
    $delete:function($where){},
    $_cascadeDelete:function(parentTableClassname,primaryKey){},
    find:function(){},
    fetchAll:function($where,order,count,offset){},
    fetchRow:function($where,order,offset){},
    fetchNew:function(){},
    createRow:function(data,defaultSource){},
    $_where:function(select,$where){},
    $_order:function(select,order){},
    $_fetch:function(select){}
}



Azf_Model_Tree_Navigation = {
    $_name:null,
    $_primary:null,
    $_staticParams:null,
    $_dynamicParams:null,
    $_pluginsParams:null,
    $_urlMap:null,
    lastFetchConfigurationId:null,
    tid:null,
    $_defaultDb:null,
    $_definition:null,
    $_definitionConfigName:null,
    $_defaultMetadataCache:null,
    $_db:null,
    $_schema:null,
    $_cols:null,
    $_identity:null,
    $_sequence:null,
    $_metadata:null,
    $_metadataCache:null,
    $_metadataCacheInClass:null,
    $_rowClass:null,
    $_rowsetClass:null,
    $_referenceMap:null,
    $_dependentTables:null,
    $_defaultSource:null,
    $_defaultValues:null,
    createTemporaryTable:function(){},
    dropTemporaryTable:function(){},
    getTemporaryTableName:function(){},
    $_lockTable:function(){},
    $_unlockTable:function(){},
    insertNode:function(l,r,parentId,value){},
    mergeTemporaryTable:function(){},
    moveNodeIntoTemporaryTable:function(node){},
    parseNode:function(r){},
    $_find:function(id){},
    isStorableValue:function(value){},
    getLastFetchConfigurationId:function(){},
    setLastFetchConfigurationId:function(lastFetchConfigurationId){},
    $_prepareStmt:function(sql){},
    $_getCacheKey:function(id){},
    disable:function(nodeId){},
    enable:function(nodeId){},
    getCompleteMenu:function(userId){},
    $_encodeConfig:function(config){},
    $_decodeConfig:function(config){},
    $_mergeConfigurationRow:function(row,dynamicParams,plugins){},
    $_fetchStaticConfig:function(row){},
    $_fetchConfiguration:function(id,force){},
    $_saveCache:function(id){},
    $_setFieldParam:function(id,field,param,value){},
    $_getFieldParam:function(id,field,name,$default){},
    $_getFieldParams:function(id,field){},
    $_hasFieldParam:function(id,field,name){},
    $_deleteFieldParam:function(id,field,name){},
    $_getPluginNames:function(id){},
    $_getPluginParams:function(id,plugin){},
    $_generatePluginName:function(id,plugin){},
    $_setPluginParam:function(id,plugin,name,value){},
    $_setPluginParams:function(id,plugin,params){},
    $_deletePluginParam:function(id,plugin,name){},
    $_deletePlugin:function(id,plugin){},
    setStaticParam:function(id,name,value){},
    getStaticParam:function(id,name,$default){},
    deleteStaticParam:function(id,name){},
    hasStaticParam:function(id,name){},
    getStaticParams:function(id){},
    setDynamicParam:function(id,name,value){},
    getDynamicParam:function(id,name,$default){},
    hasDynamicParam:function(id,name){},
    deleteDynamicParam:function(id,name){},
    getDynamicParams:function(id){},
    getPluginNames:function(id){},
    getPluginParams:function(id,plugin){},
    getPluginParam:function(id,plugin,name,$default){},
    hasPluginParam:function(id,plugin,name){},
    setPluginParam:function(id,plugin,name,value){},
    setPluginParams:function(id,plugin,params){},
    deletePluginParam:function(id,plugin,name){},
    deletePlugin:function(id,plugin){},
    match:function(id){},
    getBreadCrumbsMenu:function(nodeId,userId){},
    getRootMenu:function(userId){},
    getContextualMenu:function(nodeId,userId){},
    setTitle:function(nodeId,title){},
    setUrl:function(nodeId,url){},
    findByHome:function(){},
    setHome:function(nodeId){},
    getTid:function(){},
    setTid:function(tid){},
    find:function(id){},
    $_insertNode:function(l,r,parentId,value){},
    $_parseNode:function(r){},
    $_startTransaction:function(){},
    $_endTransaction:function(){},
    $_rollBackTransaction:function(){},
    $_createTemporaryTable:function(){},
    $_moveNodeIntoTemporaryTable:function(node){},
    $_mergeTemporaryTable:function(){},
    $_dropTemporaryTable:function(){},
    $_parseCols:function(cols,tablePrefix){},
    initTree:function(value){},
    isTreeValid:function(){},
    insertInto:function(id,value){},
    insertAfter:function(id,value){},
    insertBefore:function(id,value){},
    $delete:function(id){},
    deleteTree:function(){},
    moveInto:function(targetId,dstId){},
    moveBefore:function(targetId,dstId){},
    moveAfter:function(targetId,dstId){},
    getTree:function(cols,showMetadataColumns){},
    getParents:function(id,cols,showMetadataColumns){},
    $_unsetAllTreeMetadata:function(tree){},
    $_unsetPartialTreeMetadata:function(tree,cols){},
    $_parseTree:function(stmt,cols,showMetadataColumns){},
    getBranch:function(id,cols,showMetadataColumns){},
    getVisible:function(id,cols,showMetadataColumns){},
    getRootNode:function(cols,showMetadataColumns){},
    $__construct:function(config){},
    setOptions:function(options){},
    setDefinition:function(definition){},
    getDefinition:function(){},
    setDefinitionConfigName:function(definitionConfigName){},
    getDefinitionConfigName:function(){},
    setRowClass:function(classname){},
    getRowClass:function(){},
    setRowsetClass:function(classname){},
    getRowsetClass:function(){},
    addReference:function(ruleKey,columns,refTableClass,refColumns,onDelete,onUpdate){},
    setReferences:function(referenceMap){},
    getReference:function(tableClassname,ruleKey){},
    setDependentTables:function(dependentTables){},
    getDependentTables:function(){},
    setDefaultSource:function(defaultSource){},
    getDefaultSource:function(){},
    setDefaultValues:function(defaultValues){},
    getDefaultValues:function(){},
    setDefaultAdapter:function(db){},
    getDefaultAdapter:function(){},
    $_setAdapter:function(db){},
    getAdapter:function(){},
    $_setupAdapter:function(db){},
    setDefaultMetadataCache:function(metadataCache){},
    getDefaultMetadataCache:function(){},
    $_setMetadataCache:function(metadataCache){},
    getMetadataCache:function(){},
    setMetadataCacheInClass:function(flag){},
    metadataCacheInClass:function(){},
    $_setupMetadataCache:function(metadataCache){},
    $_setSequence:function(sequence){},
    $_setup:function(){},
    $_setupDatabaseAdapter:function(){},
    $_setupTableName:function(){},
    $_setupMetadata:function(){},
    $_getCols:function(){},
    $_setupPrimaryKey:function(){},
    $_getReferenceMapNormalized:function(){},
    init:function(){},
    info:function(key){},
    select:function(withFromPart){},
    insert:function(data){},
    isIdentity:function(column){},
    update:function(data,$where){},
    $_cascadeUpdate:function(parentTableClassname,oldPrimaryKey,newPrimaryKey){},
    $_cascadeDelete:function(parentTableClassname,primaryKey){},
    fetchAll:function($where,order,count,offset){},
    fetchRow:function($where,order,offset){},
    fetchNew:function(){},
    createRow:function(data,defaultSource){},
    $_where:function(select,$where){},
    $_order:function(select,order){},
    $_fetch:function(select){}
}